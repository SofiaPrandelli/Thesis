##################### CREATION OF GRID 0.5 RESOLUTION ##################

# devo cambiare la risoluzione della maglia da 100 km a 50 km
#riga 58 per la risoluzione della maglia 

#world <- ne_countries(scale = "medium", returnclass = "sf")
#r<-raster::extent(c(xmin=-30, xmax=54, ymin=25, ymax=74)) #extent tagliato sull'Europa
#p <- as(r, "SpatialPolygons")
#m <- sp::SpatialPolygonsDataFrame(p, data.frame(sp = "x"))
m2 <- fishnet(mask = m, res = 0.5) #risoluzione a 0.5 gradi
crs(m2) <- crs(world) #set the Coordinate reference system
m2$id=1:nrow(m2)
m2=m2[,-1] #tolgo l'oggetto "grids" da m2


##################### PRESENCE-ABSENCE MATRIX SPP1PA_2 ##################

coordinates(d)= ~d.Longitude+d.Latitude #trasforma oggetto in spatial dataframe df 
crs(d)=crs(m1)      #set the Coordinate reference system     #coordinate in WGS84
ov2 <- over(d[,2], m2) #intersect griglia-occorrenze, double-check che la colonna selezionata sia la specie --> la specie va ad intersecare la griglia
y1_2 <- cbind(as.data.frame(d[,c(1, 2, 3, 4, 5, 6)]), ov2) #add species names, genus, family, countryCode(double-check num colonna nel tuo db) 
#add d.PlantObservationID, d.Species, d.Original_Abundance, d.Abundance_Scale, d.Continent, d.Country ??
y1_2 <- y1_2[complete.cases(y1_2), ] #adding grids value
spp1_2 <- data.frame(as.matrix(long2sparse(y1_2, grids = "id", species = "d.Species")))[,-1] #spp1 matrice di abbondanza delle specie
spp1pa_2 <- vegan::decostand(spp1_2,method="pa") #trasformo in matrice Presence-Absence
rm(spp1_2)
rm(y1_2)
rm(ov2)

#################### STANDARDIZATION of plant names using TPL ###########
nomiTab=c("Taxon","Genus","Hybrid.marker","Species","Abbrev", "Infraspecific.rank",
          "Infraspecific","Authority", "ID", "Plant.Name.Index", "TPL.version",
          "Taxonomic.status","Family","New.Genus","New.Hybrid.marker","New.Species",
          "New.Infraspecific.rank", "New.Infraspecific",  "New.Authority","New.ID",
          "New.Taxonomic.status", "Typo", "WFormat", "Higher.level","Date")

namesSpPa2 <- gsub(colnames(spp1pa_2),pattern = '_',replacement = ' ')
nrowSpPa2 <- length(namesSpPa2) #nrowTraits dà la lunghezza del database che deve creare che deve essere lungo quanto il n°specie che ho
standNamesSpPa2 <- as.data.frame(matrix(NA, nrow = nrowSpPa2, ncol=25,
                                       dimnames=list(namesSpPa2, nomiTab)))

batchSize=700

install.packages("Taxonstand") #requires Taxonstand (for the TPL function)
library(Taxonstand)

for(i in 1:(ceiling(nrowSpPa2/batchSize))){
  cat(paste0("\nBatch ", i," out of ", (ceiling(nrowSpPa2/batchSize)), "\n"))
  rowsSelect <- ((i-1) * batchSize + 1):min((i*batchSize), nrowSpPa2)
  taxoAux2 <- as.data.frame(TPL(namesSpPa2[rowsSelect],infra =TRUE,corr=TRUE,
                               drop.lower.level=TRUE,repeats = 10))
  standNamesSpPa2[rowsSelect,] <- taxoAux2
}
  
  saveRDS(standNamesSpPa2,'/Users/sofiaprandelli/tesi/standnamesSpPa2.rds')
  
  taxoPlants2<-data.frame("Species"=paste(standNamesSpPa2$New.Genus,standNamesSpPa2$New.Species),
                         "Genus"=standNamesSpPa2$Genus,"Family"=standNamesSpPa2$Family)
  
taxoPlants2$Species <- gsub(taxoPlants2$Species,pattern = ' ',replacement = '_')
taxoPlants2$Species <- gsub(taxoPlants2$Species,pattern = '-',replacement = '_')
  

################ Creation of the PHYLOGENETIC TREE ##############

devtools::install_github("jinyizju/V.PhyloMaker", force=TRUE)
library(V.PhyloMaker)
phylogenyPlants2 <- phylo.maker(taxoPlants2, scenarios=c("S1","S3"))  #taxoPlants tassonomia di riferimento  
myTree2 <- phylogenyPlants2$scenario.3


##################### PD CALCULATION #######################

install.packages("picante")
library(picante)
dim(spp1pa_2)[2]==length(myTree2$tip.label) #check che spp nella matrice di comunità siano le stesse che nell'albero
PDobs_2 <- pd(spp1pa_2, myTree2, include.root=TRUE)
write.csv(PDobs_2, '/Users/sofiaprandelli/tesi/PDobs_2.csv')

############################ sesPD ###############################

#randomizing my community or spps in the tree to obtain a Standardized effect size (SES)
#ottenendo il valore "effettivo" di pd a prescindere dalle spp che ci sono in quella cella
require(picante)
sesPD_2 = picante::ses.pd(samp=spp1pa_2, tree=myTree2, null.model ="independentswap",runs = 999, include.root=TRUE)

#salvare sesPD come rds o come tabella cvs, basta che possa essere importato in R come data.frame
write.csv(sesPD_2, '/Users/sofiaprandelli/tesi/sesPD_2.csv')


################# WORLDCLIM DOWNLOAD ####################

library(raster)
Worldclim2 <- raster::getData('worldclim', var='bio', res=2.5) #risoluzione più fine, a 2.5 arc-minuti
plot(Worldclim2)
plot(m2, add=TRUE)
Worldclim2=crop(Worldclim2, m2)
plot(Worldclim2)

############## all the climatic variables + sesPD, PD ######################

tmp2 = raster::extract(Worldclim2, m2, fun=mean, df=TRUE) #estrai la media di tutti i valori delle 19 variabili per le rispettive celle della griglia m2
#tmp$bio1 = tmp$bio1 / 10 #i valori di bio1 su Worldclim sono moltiplicati per 10
colnames(tmp2)[1] <- "id"
#merge tmp2 e oggetto spaziale m2 (tmp2 e m2 hanno lo stesso numero di celle e lo stesso ordine)
mydf5 <- sp::merge(m2, tmp2, by='id', all=F)
mydf5=cbind(m2, tmp2)
mydf5 <- mydf5@data
# aggiungo a PDobs e a sesPD il campo 'id'
require(tidyverse)
PDobs_2 <- add_column(PDobs_2, rownames(spp1pa_2), .before='PD')
colnames(PDobs_2)[1] <- "id"
sesPD_2 <- add_column(sesPD_2, rownames(spp1pa_2), .before='ntaxa')
colnames(sesPD_2)[1] <- "id"

mydf5=sp::merge(mydf5, PDobs_2, by='id')
mydf5=sp::merge(mydf5, sesPD_2, by='id')
mydf5 <- mydf5[,-2]
mydf5 <- mydf5[,-23:-24]
mydf5 <- filter(mydf5, bio1 !="NA")
colnames(mydf5) [c(21,22,28)] <- c("PD", "SR", "sesPD")
write.csv(mydf5, '/Users/sofiaprandelli/tesi/mydf5.csv')


############## RANDOM FOREST MODEL ############ Extent Europe, resolution 2.5=about 4.5 km at the equator

require(ranger)
library(ranger)
myRF2=ranger(sesPD~bio1+bio3+bio4+bio5+bio7+bio12+bio15, importance = 'permutation', data=mydf5)

myRF2=ranger(sesPD~bio1+bio2+bio3+bio4+bio5+bio6+bio7+bio8+bio9+bio10+bio11+bio12+bio13+bio14+bio15+bio16+bio17+bio18+bio19, importance = 'permutation', data=mydf5)

print(myRF2)
importance(myRF2)
sesPD_prediction_2 <- plot(x=myRF2$predictions, y=mydf5$sesPD,
     xlab = "Predictions",
     ylab = "sesPD",
     main = "Prediction of Standardized Effect Size of Phylgenetic Diversity 
     based on Bioclimatic Variables")
new.stack2 = stack(Worldclim2[[c("bio1","bio2","bio3","bio4","bio5","bio6","bio7","bio8","bio9","bio10","bio11","bio12","bio13","bio14","bio15","bio16","bio17","bio18","bio19")]])


############# PREDICTION #################

myPredR2 = predict(new.stack2, myRF2, type = "response", predict.all=FALSE, na.rm = T, progress = "text", fun = function(model, ...) predict(model, ...)$predictions)
myPredR2
#hist(mydf5$sesPD, col="blue")
#hist(myPredR, add=TRUE)
plot(myPredR2, main = "Prediction of sesPD based on
     Random Forest model")

################### RASTER FINALI ####################
# 1
library(raster)
library(ggplot2)
library(rasterVis)

gplot(c, maxpixels=500000) +
  geom_raster(aes(fill = value), interpolate = TRUE, color = "black") + 
  labs(x="Longitude",y="Latitude", fill="")+
  theme_light()+
  theme(legend.position = "bottom")+
  guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
         size = guide_legend(title.position="top", title.hjust = 0.5))+
  coord_equal()

####################################### 2
gplot(myPredR2, maxpixels=500000) +
  geom_raster(aes(fill = value), interpolate = TRUE, color = "black") + 
  labs(x="Longitude", y="Latitude", fill="")+
  theme_light()+
  scale_fill_gradientn(colors=rainbow(100)) +
  theme(legend.position = "bottom")+
  guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
         size = guide_legend(title.position="top", title.hjust = 0.5))+
  coord_equal()

####################################### 3
library(viridis)

gplot(myPredR2, maxpixels=500000) +
  geom_raster(aes(fill = value), interpolate = TRUE, color = "black") + 
  labs(x="Longitude",y="Latitude", fill="")+
  theme_light()+
  scale_fill_viridis() +
  theme(legend.position = "bottom")+
  guides(fill = guide_colourbar(title.position="top", title.hjust = 0.5, barwidth = 20, barheight = 0.8),
         size = guide_legend(title.position="top", title.hjust = 0.5))+
  coord_equal()

#######################################
df<-data.frame(as.matrix(myRF2$variable.importance)) 
df$variable<-rownames(df)
colnames(df)[1]<-'importance'
ggplot(df, aes(x=reorder(variable,importance), y=importance,fill=importance))+ 
  geom_bar(stat="identity", position="dodge")+ coord_flip()+
  ylab("Variable Importance")+
  xlab("")+
  ggtitle("Information Value Summary")+
  scale_fill_gradient(low="red", high="blue")+
  theme_light()+theme(legend.position = 'none')

######################################################
ggplot(myRF2$variable.importance, aes(x=reorder(variable,importance), y=importance,fill=importance))+ 
  geom_bar(stat="identity", position="dodge")+ coord_flip()+
  ylab("Variable Importance")+
  xlab("")+
  ggtitle("Information Value Summary")+
  guides(fill=F)+
  scale_fill_gradient(low="red", high="blue")


################################ SCALE FILL SCICO
scale_fill_scico <- function(..., alpha = NULL, begin = 0, end = 1, direction = 1, palette = "bilbao", midpoint = NA) {
  if (!requireNamespace("ggplot2", quietly = TRUE)) {
    stop('ggplot2 is required for this functionality', call. = FALSE)
  }
  rescaler <- if (is.na(midpoint)) rescale else mid_rescaler(midpoint)
  ggplot2::scale_fill_gradientn(colours = scico(256, alpha, begin, end, direction, palette), ..., rescaler = rescaler)
}


